package restful;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.Optional;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository, which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping("/user/signup")
	public @ResponseBody String signup(@RequestBody User user) {
		if (user.getUsername() == null || user.getEmail() == null || user.getPassword() == null) {
			return "Invalid input data";
		}
		for (User u: userRepository.findAll()) {
			if (u.getUsername().equals(user.getUsername())) {
				return "Username already used";
			} else if (u.getEmail().equals(user.getEmail())) {
				return "Email already used";
			}
		}
		userRepository.save(user);
		return "success" + user.getId();
	}

	@PostMapping("/user/login")
	public @ResponseBody User login(@RequestBody User user) {
		for (User u: userRepository.findAll()) {
			if (u.getEmail().equals(user.getEmail()) && u.getPassword().equals(user.getPassword())) {
				return u;
			}
		}
		return null;
	}

	@GetMapping("/user/get")
	public @ResponseBody Optional<User> getUser(@RequestParam String id) {
		return userRepository.findById(Integer.parseInt(id));
	}

	@PutMapping(path="/user/update") // Map ONLY GET Requests
	public @ResponseBody String updateUser (@RequestBody User user, @RequestParam String newUsername) {
		User newUser = null;
		for (User u: userRepository.findAll()) {
			if (u.getEmail().equals(user.getEmail()) && u.getPassword().equals(user.getPassword())) {
				newUser = u;
			}
			if (u.getUsername().equals(newUsername)) {
				return "Username already used";
			}
		}
		if (newUser != null) {
			newUser.setUsername(newUsername);
			userRepository.save(newUser);
			return "success" + newUser.getId();
		} else {
			return "User information error";
		}
	}

	@Autowired
	private PostRepository postRepository;

	@PostMapping("/post/add")
	public @ResponseBody String addNewPost (@RequestBody Post post) {
		post.setTimeStamp(new Date().getTime());
		postRepository.save(post);
		return "success";
	}

	@GetMapping(path="/post/all")
	public @ResponseBody Iterable<Post> getAllPosts() {
		return postRepository.findAll();
	}
}
