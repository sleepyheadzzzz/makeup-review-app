package restful;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository, which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping("/user/signup")
	public @ResponseBody String signup(@RequestBody User user) {
		if (user.getUsername() == null || user.getEmail() == null || user.getPassword() == null) {
			return "Invalid input data";
		}
		for (User u: userRepository.findAll()) {
			if (u.getUsername().equals(user.getUsername())) {
				return "Username already used";
			} else if (u.getEmail().equals(user.getEmail())) {
				return "Email already used";
			}
		}
		user.setFollower("");
		user.setFollowing("");
		user.setLiked("");
		userRepository.save(user);
		return "success" + user.getId();
	}

	@PostMapping("/user/login")
	public @ResponseBody User login(@RequestBody User user) {
		for (User u: userRepository.findAll()) {
			if (u.getEmail().equals(user.getEmail()) && u.getPassword().equals(user.getPassword())) {
				return u;
			}
		}
		return null;
	}

	@GetMapping("/user/get")
	public @ResponseBody Optional<User> getUser(@RequestParam String id) {
		return userRepository.findById(Integer.parseInt(id));
	}

	@PutMapping(path="/user/update") // Map ONLY GET Requests
	public @ResponseBody String updateUser (@RequestBody User user, @RequestParam String newUsername) {
		User newUser = null;
		for (User u: userRepository.findAll()) {
			if (u.getEmail().equals(user.getEmail()) && u.getPassword().equals(user.getPassword())) {
				newUser = u;
			}
			if (u.getUsername().equals(newUsername)) {
				return "Username already used";
			}
		}
		if (newUser != null) {
			newUser.setUsername(newUsername);
			userRepository.save(newUser);
			return "success" + newUser.getId();
		} else {
			return "User information error";
		}
	}

	@PostMapping("/user/follow")
	public @ResponseBody String updateFollow (@RequestParam String id, @RequestBody User user) {
		User loginUser = this.login(user);
		if (loginUser == null) return "User auth failed";

		// find tofollowUser
		User tofollowUser = null;
		for (User u: userRepository.findAll()) {
			if (u.getId().toString().equals(id)) tofollowUser = u;
		}
		if (tofollowUser == null) return "invalid follow user";

		//
		HashSet<String> curUserFollowing = new HashSet<>(Arrays.asList(loginUser.getFollowing().split(",")));
		HashSet<String> tofollowUserFollower = new HashSet<>(Arrays.asList(tofollowUser.getFollower().split(",")));

		String curId = loginUser.getId().toString();
		String tofollowId = tofollowUser.getId().toString();
//
//		if (curUserFollowing.contains(addId) != tofollowUserFollower.contains(addId))
//			return ">>>  updateFollow(): something wrong with data in the database";
		if (curUserFollowing.contains(tofollowId) && tofollowUserFollower.contains(curId)) {
			curUserFollowing.remove(tofollowId);
			tofollowUserFollower.remove(curId);
		} else {
			curUserFollowing.add(tofollowId);
			tofollowUserFollower.add(curId);
		}

		loginUser.setFollowing(String.join(",", curUserFollowing));
		userRepository.save(loginUser);
		tofollowUser.setFollower(String.join(",", tofollowUserFollower));
		userRepository.save(tofollowUser);

		return "success";
	}

	@Autowired
	private PostRepository postRepository;

	@PostMapping("/post/add")
	public @ResponseBody String addNewPost (@RequestBody Post post) {
		post.setTimeStamp(new Date().getTime());
		post.setLikes("");
		postRepository.save(post);
		return "success";
	}

	@PostMapping("/post/like")
	public @ResponseBody String updateLikes (@RequestParam String id, @RequestBody User user) {
		User loginUser = this.login(user);
		if (loginUser == null) return "User auth failed";
		for (Post p: postRepository.findAll()) {
			if (p.getId().toString().equals(id)) {
				// update post
				HashSet<String> likes = new HashSet<>(Arrays.asList(p.getLikes().split(",")));
				String likerId = loginUser.getId().toString();
				if (likes.contains(likerId)) likes.remove(likerId);
				else likes.add(likerId);
				p.setLikes(String.join(",", likes));
				postRepository.save(p);

				// update user
				HashSet<String> userLiked = new HashSet<>(Arrays.asList(loginUser.getLiked().split(",")));
				if (userLiked.contains(id)) userLiked.remove(id);
				else userLiked.add(id);
				loginUser.setLiked(String.join(",", userLiked));
				userRepository.save(loginUser);
			}
		}
		return "success";
	}

	@GetMapping(path="/post/all")
	public @ResponseBody Iterable<Post> getAllPosts() {
		return postRepository.findAll();
	}

	@GetMapping(path="/post/userposts")
	public @ResponseBody Iterable<Post> getAllPostsByUserId(@RequestParam String id) {
		List<Post> list = new ArrayList<>();
		for (Post p: postRepository.findAll()) {
			if (p.getPosterId().toString().equals(id)) list.add(p);
		}
		return list;
	}

	@GetMapping(path="/post/search")
	public @ResponseBody Iterable<Post> getAllPostsBySearchedKeys(@RequestParam String key) {
		List<Post> list = new ArrayList<>();
		if (key.length() == 0) return list;
		for (Post p: postRepository.findAll()) {
			if (p.getTitle().indexOf("#" + key.trim()) >= 0) list.add(p);
		}
		return list;
	}

	@GetMapping(path="/post/liked")
	public @ResponseBody Iterable<Post> getAllPostsLiked(@RequestParam String id) {
		List<Post> list = new ArrayList<>();
		for (Post p: postRepository.findAll()) {
			Set<String> likedIds = new HashSet<>(Arrays.asList(p.getLikes().split(",")));
			if (likedIds.contains(id)) list.add(p);
		}
		return list;
	}

	@Autowired
	private CommentRepository commentRepository;

	@PostMapping("/comment/add")
	public @ResponseBody String addNewComment (@RequestBody Comment comment) {
		comment.setTimeStamp(new Date().getTime());
		commentRepository.save(comment);
		return "success";
	}

	@GetMapping(path="/comment/postcomments")
	public @ResponseBody Iterable<Comment> getAllCommentsByPostId(@RequestParam String id) {
		List<Comment> list = new ArrayList<>();
		for (Comment c: commentRepository.findAll()) {
			if (c.getPostId().toString().equals(id)) list.add(c);
		}
		return list;
	}

	@Autowired
	private MessageRepository messageRepository;

	@PostMapping("/message/add")
	public @ResponseBody String addNewMessage (@RequestBody Message message) {
		message.setTimeStamp(new Date().getTime());
		messageRepository.save(message);
		return "success";
	}

	@GetMapping(path="/message/postermessages")
	public @ResponseBody Iterable<Message> getAllMessagesByPosterId(@RequestParam String id) {
		List<Message> list = new ArrayList<>();
		for (Message c: messageRepository.findAll()) {
			if (c.getPosterId().toString().equals(id) || c.getReceiverId().toString().equals(id)) list.add(c);
		}
		return list;
	}
}
